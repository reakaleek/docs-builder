name: 'Documentation Preview'
description: 'Builds and publishes documentation to preview environment'

branding:
  icon: 'filter'
  color: 'red'

inputs:
  strict:
    description: 'Whether to fail the build if there are any warnings'
    default: true
    required: false

env:
  IS_DEPLOYMENT: ${{ github.event_name == 'pull_request' || github.ref == 'refs/heads/main' }}
  IS_CLEANUP: ${{ github.event_name == 'pull_request_target' && github.event.action == 'closed' }}

runs:
  using: "composite"
  steps:

    - name: Authenticate 
      uses: elastic/docs-builder/.github/actions/aws-auth@main

    - name: Cleanup
      if: ${{ env.IS_CLEANUP }}
      run: |
        aws s3 rm "s3://elastic-docs-v3-website-preview/${GITHUB_REPOSITORY}/pull/${PR_NUMBER}" --recursive

    - name: Delete GitHub environment
      if: ${{ env.IS_CLEANUP }}
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const deployments = await github.rest.repos.listDeployments({
            owner,
            repo,
            environment: `preview-${context.issue.number}`
          });
          for (const deployment of deployments.data) {
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: deployment.id,
              state: 'inactive',
              description: 'Marking deployment as inactive'
            });
            await github.rest.repos.deleteDeployment({
              owner,
              repo,
              deployment_id: deployment.id
            });
          }

    - name: Create Deployment
      if: env.IS_DEPLOYMENT
      uses: actions/github-script@v7
      id: deployment
      with:
        result-encoding: string
        script: |
          const { owner, repo } = context.repo;
          const branch = context.payload.pull_request
            ? context.payload.pull_request.head.ref 
            : context.ref.replace('refs/heads/', '');

          const repoResponse = await github.rest.repos.get({
            owner,
            repo
          })
          const defaultBranch = repoResponse.data.default_branch;
          const isDefaultBranch = branch === defaultBranch;

          const environment = isDefaultBranch
            ? `docs-preview-${defaultBranch}`
            : `docs-preview-${context.issue.number}`;

          const logUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

          const deployment = await github.rest.repos.createDeployment({
              owner,
              repo,
              ref: branch,
              environment,
              auto_merge: false,
              required_contexts: [],
          })
          await github.rest.repos.createDeploymentStatus({
              deployment_id: deployment.data.id,
              owner,
              repo,
              state: "in_progress",
              log_url: logUrl,
          })
          return deployment.data.id

    - name: Generate Path Prefix
      if: env.IS_DEPLOYMENT
      id: path-prefix
      shell: bash
      run: |
        if [[ -n "${{ github.event.pull_request }}" ]]; then
          echo "result=/${GITHUB_REPOSITORY}/pull/${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
        else
          echo "result=/${GITHUB_REPOSITORY}/${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi

    - name: Build public documentation
      if: env.IS_DEPLOYMENT
      uses: elastic/docs-builder@main
      continue-on-error: ${{ inputs.strict != 'true' }} # Will be removed after the migration phase
      with:
        prefix: ${{ steps.path-prefix.outputs.result }}
        strict: ${{ inputs.strict }}

    - name: Upload artifact
      if: env.IS_DEPLOYMENT
      shell: bash
      run: |
        aws s3 sync .artifacts/docs/html s3://elastic-docs-v3-website-preview${{steps.path-prefix.outputs.result}} --delete --quiet
        aws cloudfront create-invalidation --distribution-id EKT7LT5PM8RKS --paths "${{steps.path-prefix.outputs.result}}/*"

    - name: Update deployment status
      uses: actions/github-script@v7
      if: always() && env.IS_DEPLOYMENT
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.deployment.outputs.result }},
            state: '${{ job.status == 'success' && 'success' || 'failure' }}',
            environment_url: `https://docs-v3-preview.elastic.dev${{steps.path-prefix.outputs.result}}`,
            log_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
            description: "Deployment completed",
          })
